// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.6
// source: protos/ticket.proto

package ticket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RailwayService_PurchaseTicket_FullMethodName   = "/ticket.RailwayService/PurchaseTicket"
	RailwayService_GetReceipt_FullMethodName       = "/ticket.RailwayService/GetReceipt"
	RailwayService_GetUserBySection_FullMethodName = "/ticket.RailwayService/GetUserBySection"
	RailwayService_RemoveUser_FullMethodName       = "/ticket.RailwayService/RemoveUser"
	RailwayService_UpdateUserSeat_FullMethodName   = "/ticket.RailwayService/UpdateUserSeat"
)

// RailwayServiceClient is the client API for RailwayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RailwayServiceClient interface {
	PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	GetReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error)
	GetUserBySection(ctx context.Context, in *SectionUserRequest, opts ...grpc.CallOption) (*SectionUserResonse, error)
	RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error)
	UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error)
}

type railwayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRailwayServiceClient(cc grpc.ClientConnInterface) RailwayServiceClient {
	return &railwayServiceClient{cc}
}

func (c *railwayServiceClient) PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, RailwayService_PurchaseTicket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) GetReceipt(ctx context.Context, in *ReceiptRequest, opts ...grpc.CallOption) (*ReceiptResponse, error) {
	out := new(ReceiptResponse)
	err := c.cc.Invoke(ctx, RailwayService_GetReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) GetUserBySection(ctx context.Context, in *SectionUserRequest, opts ...grpc.CallOption) (*SectionUserResonse, error) {
	out := new(SectionUserResonse)
	err := c.cc.Invoke(ctx, RailwayService_GetUserBySection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) RemoveUser(ctx context.Context, in *RemoveUserRequest, opts ...grpc.CallOption) (*RemoveUserResponse, error) {
	out := new(RemoveUserResponse)
	err := c.cc.Invoke(ctx, RailwayService_RemoveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *railwayServiceClient) UpdateUserSeat(ctx context.Context, in *UpdateUserSeatRequest, opts ...grpc.CallOption) (*UpdateUserSeatResponse, error) {
	out := new(UpdateUserSeatResponse)
	err := c.cc.Invoke(ctx, RailwayService_UpdateUserSeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RailwayServiceServer is the server API for RailwayService service.
// All implementations must embed UnimplementedRailwayServiceServer
// for forward compatibility
type RailwayServiceServer interface {
	PurchaseTicket(context.Context, *PurchaseTicketRequest) (*ReceiptResponse, error)
	GetReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error)
	GetUserBySection(context.Context, *SectionUserRequest) (*SectionUserResonse, error)
	RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error)
	UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error)
	mustEmbedUnimplementedRailwayServiceServer()
}

// UnimplementedRailwayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRailwayServiceServer struct {
}

func (UnimplementedRailwayServiceServer) PurchaseTicket(context.Context, *PurchaseTicketRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedRailwayServiceServer) GetReceipt(context.Context, *ReceiptRequest) (*ReceiptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceipt not implemented")
}
func (UnimplementedRailwayServiceServer) GetUserBySection(context.Context, *SectionUserRequest) (*SectionUserResonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBySection not implemented")
}
func (UnimplementedRailwayServiceServer) RemoveUser(context.Context, *RemoveUserRequest) (*RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedRailwayServiceServer) UpdateUserSeat(context.Context, *UpdateUserSeatRequest) (*UpdateUserSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSeat not implemented")
}
func (UnimplementedRailwayServiceServer) mustEmbedUnimplementedRailwayServiceServer() {}

// UnsafeRailwayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RailwayServiceServer will
// result in compilation errors.
type UnsafeRailwayServiceServer interface {
	mustEmbedUnimplementedRailwayServiceServer()
}

func RegisterRailwayServiceServer(s grpc.ServiceRegistrar, srv RailwayServiceServer) {
	s.RegisterService(&RailwayService_ServiceDesc, srv)
}

func _RailwayService_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).PurchaseTicket(ctx, req.(*PurchaseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_GetReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).GetReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_GetReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).GetReceipt(ctx, req.(*ReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_GetUserBySection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectionUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).GetUserBySection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_GetUserBySection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).GetUserBySection(ctx, req.(*SectionUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_RemoveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).RemoveUser(ctx, req.(*RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RailwayService_UpdateUserSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RailwayServiceServer).UpdateUserSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RailwayService_UpdateUserSeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RailwayServiceServer).UpdateUserSeat(ctx, req.(*UpdateUserSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RailwayService_ServiceDesc is the grpc.ServiceDesc for RailwayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RailwayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.RailwayService",
	HandlerType: (*RailwayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseTicket",
			Handler:    _RailwayService_PurchaseTicket_Handler,
		},
		{
			MethodName: "GetReceipt",
			Handler:    _RailwayService_GetReceipt_Handler,
		},
		{
			MethodName: "GetUserBySection",
			Handler:    _RailwayService_GetUserBySection_Handler,
		},
		{
			MethodName: "RemoveUser",
			Handler:    _RailwayService_RemoveUser_Handler,
		},
		{
			MethodName: "UpdateUserSeat",
			Handler:    _RailwayService_UpdateUserSeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/ticket.proto",
}
